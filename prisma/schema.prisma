// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  email         String   @unique
  passwordHash  String
  firstName     String
  lastName      String
  phoneNumber   String?
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]

  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}


model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")  
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id           Int              @id @default(autoincrement())
  name         String
  description  String?
  price        Decimal
  stockLevel   Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  category     Category         @relation(fields: [categoryId], references: [id])
  categoryId   Int
  variants     ProductVariant[]
  images       ProductImage[]
}

model ProductVariant {
  id          Int         @id @default(autoincrement())
  name        String
  stockLevel  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  product     Product     @relation(fields: [productId], references: [id])
  productId   Int
  orderItems  OrderItem[]
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  imageUrl   String
  altText    String?
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
}

model Order {
  id          Int         @id @default(autoincrement())
  status      String
  totalAmount Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
}

model OrderItem {
  id          Int            @id @default(autoincrement())
  quantity    Int
  price       Decimal
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  order       Order          @relation(fields: [orderId], references: [id])
  orderId     Int
  variant     ProductVariant @relation(fields: [variantId], references: [id])
  variantId   Int
}