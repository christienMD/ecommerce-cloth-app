generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  phoneNumber   String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime? @map("email_verified")
  image         String?
  orders        Order[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String?
  price           Decimal
  stockLevel      Int
  isPrimeDelivery Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  categoryId      Int
  category        Category         @relation(fields: [categoryId], references: [id])
  images          ProductImage[]
  variants        ProductVariant[]
  sizes           ProductSize[]
  orderItems      OrderItem[]
}

model ProductVariant {
  id         Int      @id @default(autoincrement())
  name       String
  stockLevel Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
}

enum Size {
  LG
  XL
  XXL
}

model ProductSize {
  id         Int      @id @default(autoincrement())
  size       Size
  productId  Int
  stockLevel Int      @default(10)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size])
  @@map("product_sizes")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  altText   String?
  createdAt DateTime @default(now())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  status      String
  totalAmount Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model PendingOrder {
  id        String   @id
  cartData  String
  createdAt DateTime @default(now())
  email     String
  amount    Decimal
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Decimal
  size      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   Int
  productId Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id]) // Changed to product relation
}
